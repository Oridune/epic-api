/**
 * Copyright Â© Oridune <%- new Date().getFullYear() %>
 *
 * This is a generated file. Do not edit the contents of this file!
 */

import axios, { type AxiosInstance, type AxiosResponse } from "npm:axios";

import type { TSDKOptions, TCacheKey, TCacheOptions } from "./types.ts";

<% for (const [Scope, RouteGroups] of Object.entries(scopeGroups)) { -%>
import { <%- Scope %>Module } from "<%- await generateModule(Scope, RouteGroups) %>.ts";
<% } -%>

<% for (const {name, entry} of extensions) { -%>
import { <%- name %>Entry } from "<%- entry %>.ts";
<% } -%>

export class EpicSDK {
    protected static _cachingAborts = new Map<string, AbortController>();

    static _apiVersion = "<%- apiVersion %>";
    static _options?: TSDKOptions;
    static _axios?: AxiosInstance;
    static _useCachingMethods = new Map<string, unknown>();

    static init(options?: TSDKOptions) {
        this._options = options;
        this._axios = axios.create(options?.axiosConfig);
    }

    static isPermitted = (scope: string | Function & { __permission?: string }, permission?: string): boolean => {
        return true;
    }

    static checkPermission(scope: string | Function & { __permission?: string }, permission?: string) {
        if(!this.isPermitted(scope, permission))
            throw new Error(`You are not authorized to perform this action! Missing permission '${scope}.${permission}'!`);
    }

    static resolveCacheKey(keys: TCacheKey, namespace = "__epic-sdk:cache") {
        return `${namespace}:${(keys instanceof Array ? keys : [keys]).filter(Boolean).join(":")}`;
    }

    static async setCache(keys: TCacheKey, value: any) {
        if(typeof this._options?.cache?.setter !== "function")
            throw new Error("A cache setter is not defined!");

        return await this._options.cache.setter(
            this.resolveCacheKey(keys),
            JSON.stringify({ value, timestamp: Date.now() / 1000 })
        );
    }

    static async getCache<T>(keys: TCacheKey) {
        if(typeof this._options?.cache?.getter !== "function")
            throw new Error("A cache getter is not defined!");

        const value = await this._options.cache.getter(this.resolveCacheKey(keys));

        if(!value) return null;

        return JSON.parse(value) as {
            value: T;
            timestamp: number;
            expired?: boolean;
        };
    }

    static async expireCache(keys: TCacheKey) {
        if(typeof this._options?.cache?.getter !== "function")
            throw new Error("A cache getter is not defined!");
            
        if(typeof this._options?.cache?.setter !== "function")
            throw new Error("A cache setter is not defined!");

        const value = await this._options.cache.getter(this.resolveCacheKey(keys));

        if(!value) return false;

        return await this._options.cache.setter(
            this.resolveCacheKey(keys),
            `{"expired": true,` + value.substring(1)
        );
    }

    static async delCache(keys: TCacheKey) {
        if(typeof this._options?.cache?.delete !== "function")
            throw new Error("A cache delete function is not defined!");

        return await this._options.cache.delete(this.resolveCacheKey(keys));
    }

    static async cacheKeys(startsWith?: string) {
        if(typeof this._options?.cache?.keys !== "function")
            throw new Error("A cache keys function is not defined!");

        return (await this._options.cache.keys()).filter(key => key.startsWith(startsWith ?? this.resolveCacheKey("")));
    }

    static async useCache<T>(callback: () => T | Promise<T>, options?: TCacheOptions<T>) {
        const Cached = options?.cacheKey ? await this.getCache<T>(options.cacheKey) : null;

        returnCache: if (Cached !== null) {
            if(Cached.expired) break returnCache;
            
            if(
                options?.cacheTTL && (
                    Cached.timestamp + (
                        typeof options.cacheTTL === "function"
                        ? options.cacheTTL(Cached.value, Cached.timestamp)
                        : options.cacheTTL
                    )
                ) < (Date.now() / 1000)
            ) {
                await this.expireCache(options.cacheKey!);

                break returnCache;
            }

            return Cached.value;
        }

        try {
            const Results = await callback();

            if (options?.cacheKey && ![null, undefined].includes(Results as any)) {
                await this.setCache(options.cacheKey, Results);
            }

            return Results as T;
        } catch(error) {
            if(Cached) return Cached.value;

            throw error;
        }
    }

    static useCaching<T>(cacheKey: TCacheKey, callback: (opts: { signal: AbortSignal }) => T | Promise<T>, options?: Omit<TCacheOptions<T>, "cacheKey">, freshMethods = false) {
        const resolvedCacheKey = this.resolveCacheKey(cacheKey);

        const _methods = this._useCachingMethods.get(resolvedCacheKey) as typeof methods;

        if(_methods && !freshMethods) return _methods;

        const get = () => {
            return this.useCache<T>(() => {
                this._cachingAborts.get(resolvedCacheKey)?.abort();

                const controller = new AbortController();

                this._cachingAborts.set(resolvedCacheKey, controller);

                return callback({ signal: controller.signal })
            }, {
                cacheKey,
                ...options,
            })
        };

        const expire = () => this.expireCache(cacheKey);

        const del = () => this.delCache(cacheKey);

        const invalidateCallbacks = new Set<(data: T) => void>();

        const onInvalidate = (callback: (data: T) => void) => {
            invalidateCallbacks.add(callback);
        }

        const offInvalidate = (callback: (data: T) => void) => {
            invalidateCallbacks.delete(callback);
        }

        const invalidate = async () => {
            const baseKey = cacheKey instanceof Array ? cacheKey[0] : cacheKey;

            if(baseKey) {
                await Promise.all(Array.from(this._useCachingMethods.keys()).map(async (key) => {
                    if(key.startsWith(this.resolveCacheKey(baseKey))) {
                        await (this._useCachingMethods.get(key) as typeof methods).expire();
                    }
                }));
            } else await expire();
            
            const data = await get();

            for (const callback of invalidateCallbacks) {
                callback(data);
            }

            return data;
        }

        const methods = { get, expire, del, invalidate, onInvalidate, offInvalidate };

        this._useCachingMethods.set(resolvedCacheKey, methods);

        return methods;
    }

    static resolveAxiosResponse<T>(executor: () => Promise<AxiosResponse<T>>, options?: TCacheOptions<T>) {
        const verifyResponseShape = (res: AxiosResponse) => {
            // Check if the data object exists
            if (!res.data || typeof res.data !== "object") {
                throw new Error("Response data is missing or invalid!");
            } else if (!res.data.status) {
                throw new Error(res.data.messages?.[0]?.message ?? "failure");
            }

            return res.data;
        };

        const executors = {
            get raw() {
                return executor();
            },
            get res() {
                const callback = () => new Promise<T>((resolve, reject) => {
                    executors.raw
                        .then((res) => {
                            try {
                                resolve(verifyResponseShape(res));
                            } catch (err) {
                                reject(err);
                            }
                        })
                        .catch((err) => reject(err))
                });

                if(options?.cacheKey) return EpicSDK.useCache(callback, options);

                return callback();
            },
            get data() {
                return (async () => {
                    const res = await executors.res;

                    if (
                        typeof res === "object" && res !== null && "data" in res
                    ) return res.data;

                    throw new Error(
                        "Unexpected response! Data is not available or valid!",
                    );
                })();
            },
        };

        return executors;
    }

<% for (const [Scope, RouteGroups] of Object.entries(scopeGroups)) { -%>
    static <%- Scope %> = <%- Scope %>Module(this);
<% } -%>

    static extensions = {
<% for (const {name} of extensions) { -%>
        <%- name %>: <%- name %>Entry,
<% } -%>
    }
}
