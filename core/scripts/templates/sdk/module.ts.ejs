import type { ObjectId, TRequestOptions, TRequestExecutors } from "../types";

export interface IController$<%- scope %> {
    <% for (const [Name, Routes] of Object.entries(routeGroups)) { -%>

    <% const QueryShape = await getTypeStr(Routes[0], "query"); -%>
    <% const ParamsShape = await getTypeStr(Routes[0], "params"); -%>
    <% const BodyShape = await getTypeStr(Routes[0], "body"); -%>
    <% const ReturnShape = await getTypeStr(Routes[0], "return"); -%>

    <% for (const Route of Routes.sort((a) => (a.options.method.toLowerCase() === "get" ? -1 : 1))) { -%>
    <% if (Route.options.method.toLowerCase() === "get") { -%>
    <%- Route.options.name %>(): TRequestExecutors<
        <%- ReturnShape.content.trim() === "{}" ? "{ status: boolean; data: undefined }" : ReturnShape.content %>
    >;
    <% } -%>
    <%- Route.options.name %><
        Method extends "<%- Route.options.method %>",
        QueryShape extends <%- QueryShape.content %>,
        ParamsShape extends <%- ParamsShape.content %>,
        BodyShape extends <%- BodyShape.content %>,
    >(data: {
        method?: Method;
        query<%- QueryShape.optional ? "?" : "" %>: QueryShape;
        params<%- ParamsShape.optional ? "?" : "" %>: ParamsShape;
        body<%- BodyShape.optional ? "?" : "" %>: BodyShape;
    } & TRequestOptions): TRequestExecutors<
        <%- ReturnShape.content.trim() === "{}" ? "{ status: boolean; data: undefined }" : ReturnShape.content %>
    , BodyShape>;
    <% } -%>
    <% } -%>
}

export const <%- scope %>Module = (sdk: any): IController$<%- scope %> => ({
    <% for (const [Name, Routes] of Object.entries(routeGroups)) { %>
    <%- Name %>(data?: any) {
        return sdk.resolveAxiosResponse(async () => {
            if (!sdk.axios) throw new Error("Axios not initialized!");

            sdk.checkPermission("<%- scope %>", "<%- Name %>");

            const res = await sdk.axios.request({
                method: data?.method ?? "<%- Routes[0].options.method %>" ?? "get",
                url: `<%- Routes[0].endpoint %>/${Object.values(data?.params ?? {}).join("/")}`,
                params: data?.query,
                data: data?.body,
                ...data?.axiosConfig,
            });

            return res;
        });
    },
    <% } %>
});